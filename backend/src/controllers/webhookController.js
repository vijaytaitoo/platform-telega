const { supabase } = require('../config/database');
const telegramBotService = require('../services/telegramBotService');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram –±–æ—Ç–∞
const handleTelegramWebhook = async (req, res) => {
  try {
    const { storeId } = req.params;
    const update = req.body;

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`Webhook received for store ${storeId}:`, JSON.stringify(update, null, 2));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞–≥–∞–∑–∏–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∞–∫—Ç–∏–≤–µ–Ω
    const { data: store, error: storeError } = await supabase
      .from('stores')
      .select('id, is_active, telegram_bot_token')
      .eq('id', storeId)
      .eq('is_active', true)
      .single();

    if (storeError || !store) {
      console.error(`Store ${storeId} not found or inactive`);
      return res.status(404).json({ error: '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!telegramBotService.activeBots.has(storeId)) {
      if (!store.telegram_bot_token) {
        console.error(`No bot token for store ${storeId}`);
        return res.status(400).json({ error: '–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' });
      }

      await telegramBotService.initializeBot(storeId, store.telegram_bot_token);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await telegramBotService.handleUpdate(storeId, update);

    res.json({ ok: true });
  } catch (error) {
    console.error('Error handling Telegram webhook:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
const setWebhook = async (req, res) => {
  try {
    const { storeId } = req.params;
    const { webhook_url } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const { data: store, error: storeError } = await supabase
      .from('stores')
      .select('owner_id, telegram_bot_token')
      .eq('id', storeId)
      .single();

    if (storeError || !store) {
      return res.status(404).json({ error: '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (req.user.role !== 'admin' && store.owner_id !== req.user.id) {
      return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞' });
    }

    if (!store.telegram_bot_token) {
      return res.status(400).json({ error: '–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞' });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!telegramBotService.activeBots.has(storeId)) {
      await telegramBotService.initializeBot(storeId, store.telegram_bot_token);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    const webhookUrl = webhook_url || `${process.env.BASE_URL}/api/webhook/telegram/${storeId}`;
    const success = await telegramBotService.setWebhook(storeId, webhookUrl);

    if (success) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤–µ–±—Ö—É–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–∞–≥–∞–∑–∏–Ω–∞
      await supabase
        .from('stores')
        .update({ 
          webhook_url: webhookUrl,
          updated_at: new Date().toISOString()
        })
        .eq('id', storeId);

      res.json({ 
        success: true, 
        webhook_url: webhookUrl,
        message: '–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
      });
    } else {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞' });
    }
  } catch (error) {
    console.error('Error setting webhook:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
const deleteWebhook = async (req, res) => {
  try {
    const { storeId } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const { data: store, error: storeError } = await supabase
      .from('stores')
      .select('owner_id')
      .eq('id', storeId)
      .single();

    if (storeError || !store) {
      return res.status(404).json({ error: '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (req.user.role !== 'admin' && store.owner_id !== req.user.id) {
      return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞' });
    }

    // –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫
    const success = await telegramBotService.deleteWebhook(storeId);

    if (success) {
      // –£–¥–∞–ª—è–µ–º URL –≤–µ–±—Ö—É–∫–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞–≥–∞–∑–∏–Ω–∞
      await supabase
        .from('stores')
        .update({ 
          webhook_url: null,
          updated_at: new Date().toISOString()
        })
        .eq('id', storeId);

      res.json({ 
        success: true,
        message: '–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      });
    } else {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞' });
    }
  } catch (error) {
    console.error('Error deleting webhook:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ
const getWebhookInfo = async (req, res) => {
  try {
    const { storeId } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const { data: store, error: storeError } = await supabase
      .from('stores')
      .select('owner_id, webhook_url, telegram_bot_token')
      .eq('id', storeId)
      .single();

    if (storeError || !store) {
      return res.status(404).json({ error: '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (req.user.role !== 'admin' && store.owner_id !== req.user.id) {
      return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–±—Ö—É–∫–µ' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–±—Ö—É–∫–µ –æ—Ç Telegram
    let webhookInfo = null;
    if (store.telegram_bot_token) {
      try {
        const axios = require('axios');
        const response = await axios.get(`https://api.telegram.org/bot${store.telegram_bot_token}/getWebhookInfo`);
        webhookInfo = response.data.result;
      } catch (error) {
        console.error('Error getting webhook info from Telegram:', error);
      }
    }

    res.json({
      store_webhook_url: store.webhook_url,
      telegram_webhook_info: webhookInfo,
      bot_configured: !!store.telegram_bot_token
    });
  } catch (error) {
    console.error('Error getting webhook info:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const startPolling = async (req, res) => {
  try {
    const { storeId } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const { data: store, error: storeError } = await supabase
      .from('stores')
      .select('owner_id, telegram_bot_token')
      .eq('id', storeId)
      .single();

    if (storeError || !store) {
      return res.status(404).json({ error: '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (req.user.role !== 'admin' && store.owner_id !== req.user.id) {
      return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ polling' });
    }

    if (!store.telegram_bot_token) {
      return res.status(400).json({ error: '–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞' });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!telegramBotService.activeBots.has(storeId)) {
      await telegramBotService.initializeBot(storeId, store.telegram_bot_token);
    }

    // –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    await telegramBotService.deleteWebhook(storeId);

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è polling —Ä–µ–∂–∏–º–∞
    // –í production –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ–±—Ö—É–∫–∏

    res.json({ 
      success: true,
      message: 'Polling —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)'
    });
  } catch (error) {
    console.error('Error starting polling:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const sendTestMessage = async (req, res) => {
  try {
    const { storeId } = req.params;
    const { chat_id, message } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const { data: store, error: storeError } = await supabase
      .from('stores')
      .select('owner_id, telegram_bot_token')
      .eq('id', storeId)
      .single();

    if (storeError || !store) {
      return res.status(404).json({ error: '–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (req.user.role !== 'admin' && store.owner_id !== req.user.id) {
      return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π' });
    }

    if (!store.telegram_bot_token) {
      return res.status(400).json({ error: '–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞' });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!telegramBotService.activeBots.has(storeId)) {
      await telegramBotService.initializeBot(storeId, store.telegram_bot_token);
    }

    const bot = telegramBotService.activeBots.get(storeId);
    const testMessage = message || '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ Telegram –º–∞–≥–∞–∑–∏–Ω–∞! üõçÔ∏è';

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const result = await telegramBotService.sendMessage(bot, chat_id, testMessage);

    if (result) {
      res.json({ 
        success: true,
        message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
        telegram_response: result
      });
    } else {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è' });
    }
  } catch (error) {
    console.error('Error sending test message:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
const initializeAllBots = async () => {
  try {
    console.log('Initializing all active bots...');

    const { data: stores, error } = await supabase
      .from('stores')
      .select('id, telegram_bot_token')
      .eq('is_active', true)
      .not('telegram_bot_token', 'is', null);

    if (error) {
      console.error('Error fetching stores:', error);
      return;
    }

    for (const store of stores) {
      try {
        await telegramBotService.initializeBot(store.id, store.telegram_bot_token);
        console.log(`Bot initialized for store ${store.id}`);
      } catch (error) {
        console.error(`Error initializing bot for store ${store.id}:`, error);
      }
    }

    console.log(`Initialized ${stores.length} bots`);
  } catch (error) {
    console.error('Error initializing bots:', error);
  }
};

module.exports = {
  handleTelegramWebhook,
  setWebhook,
  deleteWebhook,
  getWebhookInfo,
  startPolling,
  sendTestMessage,
  initializeAllBots
};

