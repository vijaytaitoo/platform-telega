const axios = require('axios');
const { supabase } = require('../config/database');
const { ORDER_STATUSES, PAYMENT_STATUSES } = require('../config/constants');

class TelegramBotService {
  constructor() {
    this.activeBots = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
  async initializeBot(storeId, botToken) {
    try {
      const bot = {
        token: botToken,
        storeId: storeId,
        baseUrl: `https://api.telegram.org/bot${botToken}`,
        sessions: new Map() // –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
      const botInfo = await this.getBotInfo(bot);
      if (!botInfo) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
      }

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
      await this.setupBotCommands(bot);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö
      this.activeBots.set(storeId, bot);

      console.log(`Bot initialized for store ${storeId}: @${botInfo.username}`);
      return bot;
    } catch (error) {
      console.error('Error initializing bot:', error);
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
  async getBotInfo(bot) {
    try {
      const response = await axios.get(`${bot.baseUrl}/getMe`);
      return response.data.result;
    } catch (error) {
      console.error('Error getting bot info:', error);
      return null;
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
  async setupBotCommands(bot) {
    const commands = [
      { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –º–∞–≥–∞–∑–∏–Ω–æ–º' },
      { command: 'catalog', description: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤' },
      { command: 'cart', description: '–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞' },
      { command: 'orders', description: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' },
      { command: 'help', description: '–ü–æ–º–æ—â—å' },
      { command: 'contact', description: '–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞–≥–∞–∑–∏–Ω–∞' }
    ];

    try {
      await axios.post(`${bot.baseUrl}/setMyCommands`, {
        commands: commands
      });
    } catch (error) {
      console.error('Error setting bot commands:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
  async handleUpdate(storeId, update) {
    const bot = this.activeBots.get(storeId);
    if (!bot) {
      console.error(`Bot not found for store ${storeId}`);
      return;
    }

    try {
      if (update.message) {
        await this.handleMessage(bot, update.message);
      } else if (update.callback_query) {
        await this.handleCallbackQuery(bot, update.callback_query);
      } else if (update.pre_checkout_query) {
        await this.handlePreCheckoutQuery(bot, update.pre_checkout_query);
      }
    } catch (error) {
      console.error('Error handling update:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  async handleMessage(bot, message) {
    const chatId = message.chat.id;
    const userId = message.from.id;
    const text = message.text;

    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.getOrCreateUser(userId, message.from);

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let session = bot.sessions.get(userId) || { state: 'main_menu', data: {} };

    if (text?.startsWith('/')) {
      await this.handleCommand(bot, message, text);
    } else {
      await this.handleTextMessage(bot, message, session);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    bot.sessions.set(userId, session);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  async handleCommand(bot, message, command) {
    const chatId = message.chat.id;
    const userId = message.from.id;

    switch (command.split(' ')[0]) {
      case '/start':
        await this.handleStartCommand(bot, message);
        break;
      case '/catalog':
        await this.showCatalog(bot, chatId);
        break;
      case '/cart':
        await this.showCart(bot, chatId, userId);
        break;
      case '/orders':
        await this.showOrders(bot, chatId, userId);
        break;
      case '/help':
        await this.showHelp(bot, chatId);
        break;
      case '/contact':
        await this.showContact(bot, chatId);
        break;
      default:
        await this.sendMessage(bot, chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
    }
  }

  // –ö–æ–º–∞–Ω–¥–∞ /start
  async handleStartCommand(bot, message) {
    const chatId = message.chat.id;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ
    const { data: store } = await supabase
      .from('stores')
      .select('name, description, logo_url')
      .eq('id', bot.storeId)
      .single();

    const welcomeText = `üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ${store?.name || '–Ω–∞—à –º–∞–≥–∞–∑–∏–Ω'}!

${store?.description || '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –æ—Ç–ª–∏—á–Ω—ã–º —Ü–µ–Ω–∞–º.'}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üì± –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤', callback_data: 'catalog' }],
        [{ text: 'üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞', callback_data: 'cart' }],
        [{ text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'orders' }],
        [{ text: 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data: 'contact' }]
      ]
    };

    await this.sendMessage(bot, chatId, welcomeText, { reply_markup: keyboard });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥
  async showCatalog(bot, chatId, categoryId = null) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Ç–æ–≤–∞—Ä—ã
      if (!categoryId) {
        const { data: categories } = await supabase
          .from('categories')
          .select('id, name, image_url')
          .eq('store_id', bot.storeId)
          .eq('is_active', true)
          .order('name');

        if (categories && categories.length > 0) {
          const keyboard = {
            inline_keyboard: categories.map(cat => [
              { text: cat.name, callback_data: `category_${cat.id}` }
            ])
          };

          await this.sendMessage(bot, chatId, 'üì± –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', { reply_markup: keyboard });
        } else {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
          await this.showProducts(bot, chatId);
        }
      } else {
        await this.showProducts(bot, chatId, categoryId);
      }
    } catch (error) {
      console.error('Error showing catalog:', error);
      await this.sendMessage(bot, chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
  async showProducts(bot, chatId, categoryId = null) {
    try {
      let query = supabase
        .from('products')
        .select('id, name, description, price, images')
        .eq('store_id', bot.storeId)
        .eq('is_active', true)
        .limit(10);

      if (categoryId) {
        query = query.eq('category_id', categoryId);
      }

      const { data: products } = await query;

      if (!products || products.length === 0) {
        await this.sendMessage(bot, chatId, '–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤');
        return;
      }

      for (const product of products) {
        await this.sendProduct(bot, chatId, product);
      }
    } catch (error) {
      console.error('Error showing products:', error);
      await this.sendMessage(bot, chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
  async sendProduct(bot, chatId, product) {
    const text = `üõçÔ∏è *${product.name}*

${product.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

üí∞ –¶–µ–Ω–∞: *${product.price.toLocaleString()} —Å—É–º*`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üõí –í –∫–æ—Ä–∑–∏–Ω—É', callback_data: `add_to_cart_${product.id}` },
          { text: '‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data: `add_to_favorites_${product.id}` }
        ]
      ]
    };

    if (product.images && product.images.length > 0) {
      await this.sendPhoto(bot, chatId, product.images[0], text, { reply_markup: keyboard });
    } else {
      await this.sendMessage(bot, chatId, text, { reply_markup: keyboard });
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
  async showCart(bot, chatId, userId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (–º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –≤ –ë–î)
      const session = bot.sessions.get(userId) || { data: {} };
      const cart = session.data.cart || {};

      if (Object.keys(cart).length === 0) {
        await this.sendMessage(bot, chatId, 'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
        return;
      }

      const productIds = Object.keys(cart);
      const { data: products } = await supabase
        .from('products')
        .select('id, name, price')
        .in('id', productIds);

      let totalAmount = 0;
      let cartText = 'üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n';

      products.forEach(product => {
        const quantity = cart[product.id];
        const itemTotal = product.price * quantity;
        totalAmount += itemTotal;

        cartText += `‚Ä¢ ${product.name}\n`;
        cartText += `  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity}\n`;
        cartText += `  –¶–µ–Ω–∞: ${itemTotal.toLocaleString()} —Å—É–º\n\n`;
      });

      cartText += `üí∞ *–ò—Ç–æ–≥–æ: ${totalAmount.toLocaleString()} —Å—É–º*`;

      const keyboard = {
        inline_keyboard: [
          [{ text: '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'checkout' }],
          [{ text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data: 'clear_cart' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É', callback_data: 'catalog' }]
        ]
      };

      await this.sendMessage(bot, chatId, cartText, { reply_markup: keyboard });
    } catch (error) {
      console.error('Error showing cart:', error);
      await this.sendMessage(bot, chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
  async handleCallbackQuery(bot, callbackQuery) {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    await this.answerCallbackQuery(bot, callbackQuery.id);

    if (data === 'catalog') {
      await this.showCatalog(bot, chatId);
    } else if (data === 'cart') {
      await this.showCart(bot, chatId, userId);
    } else if (data.startsWith('category_')) {
      const categoryId = data.replace('category_', '');
      await this.showCatalog(bot, chatId, categoryId);
    } else if (data.startsWith('add_to_cart_')) {
      const productId = data.replace('add_to_cart_', '');
      await this.addToCart(bot, chatId, userId, productId);
    } else if (data === 'checkout') {
      await this.startCheckout(bot, chatId, userId);
    } else if (data === 'clear_cart') {
      await this.clearCart(bot, chatId, userId);
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
  async addToCart(bot, chatId, userId, productId) {
    const session = bot.sessions.get(userId) || { data: {} };
    if (!session.data.cart) session.data.cart = {};

    session.data.cart[productId] = (session.data.cart[productId] || 0) + 1;
    bot.sessions.set(userId, session);

    await this.sendMessage(bot, chatId, '‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!');
  }

  // –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  async startCheckout(bot, chatId, userId) {
    const session = bot.sessions.get(userId) || { data: {} };
    session.state = 'checkout_name';
    bot.sessions.set(userId, session);

    await this.sendMessage(bot, chatId, '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
  async sendMessage(bot, chatId, text, options = {}) {
    try {
      const payload = {
        chat_id: chatId,
        text: text,
        parse_mode: 'Markdown',
        ...options
      };

      const response = await axios.post(`${bot.baseUrl}/sendMessage`, payload);
      return response.data;
    } catch (error) {
      console.error('Error sending message:', error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
  async sendPhoto(bot, chatId, photo, caption = '', options = {}) {
    try {
      const payload = {
        chat_id: chatId,
        photo: photo,
        caption: caption,
        parse_mode: 'Markdown',
        ...options
      };

      const response = await axios.post(`${bot.baseUrl}/sendPhoto`, payload);
      return response.data;
    } catch (error) {
      console.error('Error sending photo:', error);
    }
  }

  // –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query
  async answerCallbackQuery(bot, callbackQueryId, text = '') {
    try {
      await axios.post(`${bot.baseUrl}/answerCallbackQuery`, {
        callback_query_id: callbackQueryId,
        text: text
      });
    } catch (error) {
      console.error('Error answering callback query:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getOrCreateUser(telegramId, telegramUser) {
    try {
      const { data: existingUser } = await supabase
        .from('users')
        .select('*')
        .eq('telegram_id', telegramId)
        .single();

      if (existingUser) {
        return existingUser;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: newUser } = await supabase
        .from('users')
        .insert({
          telegram_id: telegramId,
          telegram_username: telegramUser.username,
          first_name: telegramUser.first_name,
          last_name: telegramUser.last_name,
          role: 'buyer'
        })
        .select()
        .single();

      return newUser;
    } catch (error) {
      console.error('Error getting or creating user:', error);
      return null;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
  async sendOrderNotification(storeId, order) {
    const bot = this.activeBots.get(storeId);
    if (!bot) return;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –º–∞–≥–∞–∑–∏–Ω–∞
      const { data: store } = await supabase
        .from('stores')
        .select('owner_id, users(telegram_id)')
        .eq('id', storeId)
        .single();

      if (!store?.users?.telegram_id) return;

      const text = `üîî *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${order.id}*

üí∞ –°—É–º–º–∞: ${order.total_amount.toLocaleString()} —Å—É–º
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${order.customer_info.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.customer_info.phone}

${order.delivery_address ? `üìç –ê–¥—Ä–µ—Å: ${order.delivery_address}` : ''}
${order.notes ? `üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: ${order.notes}` : ''}`;

      await this.sendMessage(bot, store.users.telegram_id, text);
    } catch (error) {
      console.error('Error sending order notification:', error);
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫
  async setWebhook(storeId, webhookUrl) {
    const bot = this.activeBots.get(storeId);
    if (!bot) return false;

    try {
      const response = await axios.post(`${bot.baseUrl}/setWebhook`, {
        url: webhookUrl,
        allowed_updates: ['message', 'callback_query', 'pre_checkout_query']
      });

      return response.data.ok;
    } catch (error) {
      console.error('Error setting webhook:', error);
      return false;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫
  async deleteWebhook(storeId) {
    const bot = this.activeBots.get(storeId);
    if (!bot) return false;

    try {
      const response = await axios.post(`${bot.baseUrl}/deleteWebhook`);
      return response.data.ok;
    } catch (error) {
      console.error('Error deleting webhook:', error);
      return false;
    }
  }
}

module.exports = new TelegramBotService();

